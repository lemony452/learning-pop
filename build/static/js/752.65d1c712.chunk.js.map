{"version":3,"file":"static/js/752.65d1c712.chunk.js","mappings":"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","sources":["components/Section.tsx","hooks/useFetch.tsx","components/Card.tsx","components/Empty.tsx","components/Error.tsx","routes/popsongs.tsx"],"sourcesContent":["import React from \"react\";\n\ninterface WrappperComponentType {\n  children: React.ReactNode;\n}\n\nexport default function Section({ children }: WrappperComponentType) {\n  return (\n    <div className=\"container-fluid vw-100 row\" style={{ marginTop: \"7rem\" }}>\n      <div className=\"col-10 offset-1\">{children}</div>\n    </div>\n  );\n}\n","import { useCallback, useEffect, useState } from \"react\";\n\nconst serverURL = \"http://localhost:8080/api\";\n\nconst callFetch = async (url: string, config: any) => {\n  try {\n    console.log(url, config);\n    const res = await fetch(serverURL + url, config);\n    const json = await res.json();\n    return json;\n  } catch (e) {\n    console.log(e);\n    return e;\n  }\n};\n\ninterface GETConfigType {\n  method: string;\n  headers: Object;\n}\n\ninterface POSTConfigType {\n  method: string;\n  body?: any;\n}\n\nexport const useFetch = (\n  url: string,\n  config: GETConfigType | POSTConfigType,\n) => {\n  console.log(\"============Fetch Render========\");\n  const [data, setData] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n  const [err, setErr] = useState(null);\n\n  const fetchData = useCallback(\n    async (reqData?: any) => {\n      setLoading(true);\n      try {\n        const res = await callFetch(url, { ...config, body: reqData });\n        setData(res);\n      } catch (e: any) {\n        setErr(e);\n      }\n      setLoading(false);\n    },\n    [url, config],\n  );\n\n  useEffect(() => {\n    if (config.method === \"GET\") fetchData();\n  }, [fetchData, config.method]);\n\n  return { data, isLoading, err, fetchData };\n};\n","import { PopsongType } from \"../routes/popsongs\";\nimport { Link } from \"react-router-dom\";\nimport \"../styles/Common.css\";\n\nexport default function Card({ popsong }: { popsong: PopsongType }) {\n  return (\n    <div className=\"col-12 col-sm-6 col-md-4 col-lg-3\">\n      <Link to={`/popsongs/${popsong._id}`}>\n        <img\n          src={popsong.image.url}\n          className=\"img-fluid rounded card-img\"\n          alt=\"popsong album\"\n        ></img>\n      </Link>\n      <h4 className=\"mt-1\">{popsong.title}</h4>\n      <p className=\"mt-1 text-sm text-white-50\">{popsong.singer}</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface EmptyProps {\n  url: string;\n  children: React.ReactNode;\n}\n\nexport default function Empty({ url, children }: EmptyProps) {\n  return (\n    <div>\n      <h4>{children}</h4>\n      <Link to={url}>ÌåùÏÜ° Ï∂îÍ∞ÄÌïòÎü¨ Í∞ÄÍ∏∞</Link>\n    </div>\n  );\n}\n","interface ErrorProps {\n  children: React.ReactNode;\n  status: string;\n}\n\nexport default function Error({ children, status }: ErrorProps) {\n  return (\n    <div className=\"text-center col-6 rounded\" role=\"alert\">\n      <h3 className=\"text-primary\">{status} ERROR</h3>\n      <br />\n      <p>{children}</p>\n    </div>\n  );\n}\n","import { useFetch } from \"../hooks/useFetch\";\nimport { defaultFetchType } from \"./edit\";\nimport { useMemo } from \"react\";\nimport Card from \"../components/Card\";\nimport Empty from \"../components/Empty\";\nimport Error from \"../components/Error\";\nimport Section from \"../components/Section\";\n\nexport interface PopsongType {\n  _id: string;\n  title: string;\n  singer: string;\n  translate: string;\n  lyrics: string;\n  practice?: string;\n  image: {\n    filename: string;\n    url: string;\n  };\n}\n\nfunction dummyCard(cnt: number) {\n  const dummy = new Array(cnt).fill(0);\n  return dummy.map((d, idx) => (\n    <div\n      key={idx}\n      aria-hidden=\"true\"\n      className=\"col-12 col-sm-6 col-md-4 col-lg-3\"\n    >\n      <div\n        className=\"rounded bg-secondary\"\n        style={{ width: \"200px\", height: \"200px\" }}\n      />\n      <p className=\"mt-2 placeholder-glow\">\n        <span className=\"placeholder col-2\"></span>\n        <br />\n        <span className=\"placeholder col-4\"></span>\n      </p>\n    </div>\n  ));\n}\n\nconst GET_URL = \"/popsongs\";\nconst GET_CONFIG = {\n  method: \"GET\",\n  headers: { \"Content-Type\": \"application/json\" },\n};\n\nexport default function Popsongs() {\n  console.log(\"============Popsongs Render========\");\n  const {\n    data: popsongList,\n    isLoading,\n    err,\n  }: defaultFetchType = useFetch(GET_URL, GET_CONFIG);\n\n  const PLACEHOLDER_CARDS = useMemo(() => dummyCard(8), []);\n\n  return (\n    <Section>\n      <div className=\"row\">\n        <h1 className=\"mb-5\">üéß Playlist</h1>\n        {(isLoading || !popsongList) && PLACEHOLDER_CARDS}\n        {/* {PLACEHOLDER_CARDS} */}\n        {err && (\n          <Error status=\"302\">{\"ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏Î•º Í∞ÄÏ†∏Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏñ¥Ïöî:(\"}</Error>\n        )}\n        {!isLoading && !popsongList?.length && (\n          <Empty url=\"/popsongs/new\">ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏Í∞Ä ÎπÑÏóàÏñ¥Ïöî!</Empty>\n        )}\n        {popsongList?.length > 0 &&\n          popsongList.map((popsong: PopsongType) => {\n            return <Card key={popsong._id} popsong={popsong} />;\n          })}\n      </div>\n    </Section>\n  );\n}\n"],"names":["Section","_ref","children","_jsx","className","style","marginTop","useFetch","url","config","console","log","data","setData","useState","isLoading","setLoading","err","setErr","fetchData","useCallback","async","res","fetch","json","e","callFetch","body","reqData","useEffect","method","Card","popsong","_jsxs","Link","to","concat","_id","src","image","alt","title","singer","Empty","Error","status","role","GET_URL","GET_CONFIG","headers","Popsongs","popsongList","PLACEHOLDER_CARDS","useMemo","Array","fill","map","d","idx","width","height","length"],"sourceRoot":""}