{"version":3,"file":"static/js/815.ad343d51.chunk.js","mappings":"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","sources":["components/Form.tsx","components/Modal.tsx","components/Section.tsx","hooks/useFetch.tsx","routes/edit.tsx"],"sourcesContent":["import React, { forwardRef, useState } from \"react\";\nimport { PopsongType } from \"../routes/popsongs\";\nimport \"../styles/Common.css\";\n\ninterface PropsType {\n  popsong?: PopsongType;\n  onSubmit: (e: React.FormEvent<Element>) => void;\n  title: string;\n  children: React.ReactNode;\n}\n\nconst Form = forwardRef(function Form(\n  { popsong, onSubmit, title, children }: PropsType,\n  ref: any,\n) {\n  const [img, setImg] = useState<string>(\n    popsong?.image.url || \"https://via.placeholder.com/300.jpg\",\n  );\n\n  async function encFileToBase64(fileBlob: Blob | File) {\n    const reader = new FileReader();\n    if (fileBlob) {\n      reader.readAsDataURL(fileBlob);\n      reader.onloadend = () => {\n        if (reader.result) setImg(reader.result as string);\n      };\n    }\n  }\n\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const file = e.target.files![0];\n    encFileToBase64(file);\n  }\n\n  return (\n    <div className=\"row\">\n      <form\n        ref={ref}\n        onSubmit={onSubmit}\n        encType=\"multipart/form-data\"\n        className=\"row\"\n      >\n        <h3 className=\"text-center mb-5\">{title}</h3>\n        <div className=\"col-12 col-md-10 offset-md-1 col-lg offset-lg-0\">\n          <div className=\"mb-4\">\n            <label htmlFor=\"title\" className=\"form-label\">\n              Title\n            </label>\n            <input\n              defaultValue={popsong?.title}\n              className=\"form-control\"\n              name=\"title\"\n              id=\"title\"\n              type=\"text\"\n              required\n            />\n          </div>\n          <div className=\"mb-4\">\n            <label htmlFor=\"singer\" className=\"form-label\">\n              Singer\n            </label>\n            <input\n              defaultValue={popsong?.singer}\n              className=\"form-control\"\n              name=\"singer\"\n              id=\"singer\"\n              type=\"text\"\n              required\n            />\n          </div>\n          <div className=\"mb-4\">\n            <div className=\"form-label\">Album Image</div>\n            <label className=\"form-label\" htmlFor=\"album\">\n              <img className=\"rounded form-img\" src={img} alt=\"album preview\" />\n            </label>\n            <div className=\"input-group\">\n              <input\n                onChange={onChange}\n                accept=\"image/*\"\n                type=\"file\"\n                className=\"form-control\"\n                name=\"image\"\n                id=\"album\"\n                style={{ display: \"none\" }}\n                required={!popsong ? true : false}\n              />\n              {/* <label className=\"input-group-text\" htmlFor=\"album\">Upload</label> */}\n            </div>\n          </div>\n        </div>\n        <div className=\"col-12 col-md-10 offset-md-1 col-lg offset-lg-0\">\n          <div className=\"mb-4\">\n            <label htmlFor=\"lyrics\" className=\"form-label\">\n              Lyrics\n            </label>\n            <textarea\n              defaultValue={popsong?.lyrics}\n              className=\"form-control\"\n              name=\"lyrics\"\n              id=\"lyrics\"\n              cols={30}\n              rows={20}\n              required\n            ></textarea>\n          </div>\n        </div>\n        <div className=\"col-12 col-md-10 offset-md-1 col-lg offset-lg-0\">\n          <div className=\"mb-4\">\n            <label htmlFor=\"translate\" className=\"form-label\">\n              Translate\n            </label>\n            <textarea\n              defaultValue={popsong?.translate}\n              className=\"form-control\"\n              name=\"translate\"\n              id=\"translate\"\n              cols={30}\n              rows={20}\n              required\n            ></textarea>\n          </div>\n          <div className=\"text-end\">\n            <button className=\"btn btn-primary\">Submit</button>\n            {children}\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n});\n\nexport default Form;\n","import React, { useEffect, useRef } from \"react\";\nimport { createPortal } from \"react-dom\";\n\ninterface PropsType {\n  children: React.ReactNode;\n  open: boolean;\n}\n\nexport default function Modal({ children, open }: PropsType) {\n  const modalRef = useRef<HTMLDialogElement>(null);\n\n  useEffect(() => {\n    if (open) modalRef.current?.showModal();\n  }, [open]);\n\n  if (!open) return <></>;\n\n  return createPortal(\n    <dialog ref={modalRef} className=\"rounded bg-white bg-opacity-90 p-5\">\n      {children}\n    </dialog>,\n    document.getElementById(\"modal\")!,\n  );\n}\n","import React from \"react\";\n\ninterface WrappperComponentType {\n  children: React.ReactNode;\n}\n\nexport default function Section({ children }: WrappperComponentType) {\n  return (\n    <div className=\"container-fluid vw-100 row\" style={{ marginTop: \"7rem\" }}>\n      <div className=\"col-10 offset-1\">{children}</div>\n    </div>\n  );\n}\n","import { useCallback, useEffect, useState } from \"react\";\n\nconst serverURL = \"http://localhost:8080/api\";\n\nconst callFetch = async (url: string, config: any) => {\n  try {\n    console.log(url, config);\n    const res = await fetch(serverURL + url, config);\n    const json = await res.json();\n    return json;\n  } catch (e) {\n    console.log(e);\n    return e;\n  }\n};\n\ninterface GETConfigType {\n  method: string;\n  headers: Object;\n}\n\ninterface POSTConfigType {\n  method: string;\n  body?: any;\n}\n\nexport const useFetch = (\n  url: string,\n  config: GETConfigType | POSTConfigType,\n) => {\n  console.log(\"============Fetch Render========\");\n  const [data, setData] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n  const [err, setErr] = useState(null);\n\n  const fetchData = useCallback(\n    async (reqData?: any) => {\n      setLoading(true);\n      try {\n        const res = await callFetch(url, { ...config, body: reqData });\n        setData(res);\n      } catch (e: any) {\n        setErr(e);\n      }\n      setLoading(false);\n    },\n    [url, config],\n  );\n\n  useEffect(() => {\n    if (config.method === \"GET\") fetchData();\n  }, [fetchData, config.method]);\n\n  return { data, isLoading, err, fetchData };\n};\n","import { useRef } from \"react\";\nimport { Link, useLocation, useParams } from \"react-router-dom\";\nimport { useFetch } from \"../hooks/useFetch\";\nimport Modal from \"../components/Modal\";\nimport Form from \"../components/Form\";\nimport Section from \"../components/Section\";\n\nexport interface defaultFetchType {\n  data: any;\n  isLoading: boolean;\n  err: any;\n  fetchData: any;\n}\n\nconst PUT_CONFIG = {\n  method: \"PUT\",\n};\n\nexport default function Edit() {\n  const { id } = useParams();\n  const { state: popsong } = useLocation();\n\n  // const [img, setImg] = useState<string>(popsong?.image.url || \"\");\n  const formRef = useRef<HTMLFormElement>(null);\n\n  const {\n    data,\n    isLoading: isEditting,\n    err: editErr,\n    fetchData: putData,\n  } = useFetch(`/popsongs/${id}`, PUT_CONFIG);\n\n  // async function encFileToBase64(fileBlob: Blob | File) {\n  //   const reader = new FileReader();\n  //   if (fileBlob) {\n  //     reader.readAsDataURL(fileBlob);\n  //     reader.onloadend = () => {\n  //       if (reader.result) setImg(reader.result as string);\n  //     };\n  //   }\n  // }\n\n  // function onChange(e: React.ChangeEvent<HTMLInputElement>) {\n  //   const file = e.target.files![0];\n  //   encFileToBase64(file);\n  // }\n\n  function onSubmit(e: React.FormEvent) {\n    e.preventDefault();\n\n    const formdata = new FormData(formRef.current!);\n    if (!isEditting) putData(formdata);\n  }\n\n  if (editErr) return <h5 className=\"my-auto\">{editErr}</h5>;\n\n  if (isEditting) return <h5 className=\"my-auto\">팝송 정보를 수정중이예요</h5>;\n\n  if (data && !editErr)\n    return (\n      <Modal open={true}>\n        <div className=\"text-center\">\n          <h5>저장 성공!</h5>\n          <br />\n          <Link className=\"btn btn-primary\" to={`/popsongs/${id}`}>\n            상세 페이지에서 확인하기\n          </Link>\n        </div>\n      </Modal>\n    );\n\n  return (\n    <Section>\n      <Form\n        title=\"Edit POP\"\n        popsong={popsong}\n        onSubmit={onSubmit}\n        ref={formRef}\n      >\n        <Link to={`/popsongs/${popsong._id}`}>Back</Link>\n      </Form>\n    </Section>\n    // <div className=\"row\">\n    //   <form\n    //     ref={formRef}\n    //     onSubmit={onSubmit}\n    //     encType=\"multipart/form-data\"\n    //     className=\"row\"\n    //   >\n    //     <h3 className=\"text-center mb-5\">Edit POP</h3>\n    //     <div className=\"col-12 col-md-10 offset-md-1 col-lg offset-lg-0\">\n    //       <div className=\"mb-4\">\n    //         <label htmlFor=\"title\" className=\"form-label\">\n    //           Title\n    //         </label>\n    //         <input\n    //           defaultValue={popsong?.title}\n    //           className=\"form-control\"\n    //           name=\"title\"\n    //           id=\"title\"\n    //           type=\"text\"\n    //           required\n    //         />\n    //       </div>\n    //       <div className=\"mb-4\">\n    //         <label htmlFor=\"singer\" className=\"form-label\">\n    //           Singer\n    //         </label>\n    //         <input\n    //           defaultValue={popsong?.singer}\n    //           className=\"form-control\"\n    //           name=\"singer\"\n    //           id=\"singer\"\n    //           type=\"text\"\n    //           required\n    //         />\n    //       </div>\n    //       <div className=\"mb-4\">\n    //         <div className=\"form-label\">Album Image</div>\n    //         <label className=\"form-label\" htmlFor=\"album\">\n    //           <img className=\"rounded\" src={img} alt=\"album preview\" />\n    //         </label>\n    //         <div className=\"input-group\">\n    //           <input\n    //             onChange={onChange}\n    //             accept=\"image/*\"\n    //             type=\"file\"\n    //             className=\"form-control\"\n    //             name=\"image\"\n    //             id=\"album\"\n    //             style={{ display: \"none\" }}\n    //           />\n    //           {/* <label className=\"input-group-text\" htmlFor=\"album\">Upload</label> */}\n    //         </div>\n    //       </div>\n    //     </div>\n    //     <div className=\"col-12 col-md-10 offset-md-1 col-lg offset-lg-0\">\n    //       <div className=\"mb-4\">\n    //         <label htmlFor=\"lyrics\" className=\"form-label\">\n    //           Lyrics\n    //         </label>\n    //         <textarea\n    //           defaultValue={popsong?.lyrics}\n    //           className=\"form-control\"\n    //           name=\"lyrics\"\n    //           id=\"lyrics\"\n    //           cols={30}\n    //           rows={20}\n    //           required\n    //         ></textarea>\n    //       </div>\n    //     </div>\n    //     <div className=\"col-12 col-md-10 offset-md-1 col-lg offset-lg-0\">\n    //       <div className=\"mb-4\">\n    //         <label htmlFor=\"translate\" className=\"form-label\">\n    //           Translate\n    //         </label>\n    //         <textarea\n    //           defaultValue={popsong?.translate}\n    //           className=\"form-control\"\n    //           name=\"translate\"\n    //           id=\"translate\"\n    //           cols={30}\n    //           rows={20}\n    //           required\n    //         ></textarea>\n    //       </div>\n    //       <div className=\"text-end\">\n    //         <button className=\"btn btn-primary\">Submit</button>\n    //         <Link to={`/popsongs/${id}`} className=\"mt-3\">\n    //           Back\n    //         </Link>\n    //       </div>\n    //     </div>\n    //   </form>\n    // </div>\n  );\n}\n"],"names":["forwardRef","_ref","ref","popsong","onSubmit","title","children","img","setImg","useState","image","url","_jsx","className","_jsxs","encType","htmlFor","defaultValue","name","id","type","required","singer","src","alt","onChange","e","async","fileBlob","reader","FileReader","readAsDataURL","onloadend","result","encFileToBase64","target","files","accept","style","display","lyrics","cols","rows","translate","Modal","open","modalRef","useRef","useEffect","_modalRef$current","current","showModal","createPortal","document","getElementById","_Fragment","Section","marginTop","useFetch","config","console","log","data","setData","isLoading","setLoading","err","setErr","fetchData","useCallback","res","fetch","json","callFetch","body","reqData","method","PUT_CONFIG","Edit","useParams","state","useLocation","formRef","isEditting","editErr","putData","concat","Link","to","Form","preventDefault","formdata","FormData","_id"],"sourceRoot":""}